<?php

/**
 * Gets lines from the csv.
 *
 * @param $csv
 *   The path to a csv to read
 * @param $subset
 *   The subset string from cli options. Should look something like '138:187'.
 * @return array
 *   An array of each row of the csv. The header row has a key of 'header_row',
 *   while every other row's key is an integer.
 */
function _csv2fields_get_csv_lines(&$csv, $header_row = 1, $subset = '') {
  $fields = array();
  $row = 1;
  if (!empty($subset)) {
    $subset = explode(':', $subset);
    $start_line = $subset[0];
    $end_line = $subset[1];
  }
  if (($handle = fopen($csv, "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      if ($row == $header_row) {
        $fields['header_row'] = $data;
      }
      elseif (($row >= $start_line && $row <= $end_line) || empty($subset)) {
        $fields[$row] = $data;
      }
      $row++;
    }
    fclose($handle);
  }
  return $fields;
}

/**
 * Creates the base fields.
 *
 * @param $field_data
 *   An associative array that contains the data for this field.
 * @param $headers
 *   An associative array where the keys are the header names and the values are
 *   the header indices.
 * @return array|bool|mixed|void
 *   Returns either the result of field_info_field, the newly created field, or
 *   FALSE if there were errors.
 */
function csv2fields_initialize_field($field_data, $headers) {
  $final_field_data = array();
  foreach (array_keys($headers) as $field_property_name) {
    drupal_alter('csv2fields_field_base_' . $field_property_name, $final_field_data, $field_data);
  }
  drupal_alter('csv2fields_field_base', $final_field_data, $field_data);

  // If neither a field_name or type are set, this is probably not a legitimate
  // attempt at importing a field - more likely an empty line.
  if (!$final_field_data['field_name'] && !$final_field_data['type']) {
    return FALSE;
  }

  if (!$final_field_data['field_name']) {
    $final_field_data['errors'][] = dt('Missing field_name');
  }

  if (!$final_field_data['type']) {
    $final_field_data['errors'][] = dt('Missing type');
  }

  if (isset($final_field_data['errors']) && sizeof($final_field_data['errors'])) {
    foreach ($final_field_data['errors'] as $error) {
      drush_log(dt('@error on row @row_number', array(
        '@row_number' => $field_data['row_number'],
        '@error' => $error,
      )), 'error');
    }
    return FALSE;
  }
  else {
    $field = field_info_field($final_field_data['field_name']);
    if ($field) {
      return $field;
    }
    return field_create_field($final_field_data);
  }
}

/**
 * Attaches a field to an instance, with settings, widgets, etc ready to go.
 *
 * @param $field_data
 *   An associative array that contains the data for this field.
 * @param $entity_type
 *   The entity type to attach to.
 * @param $bundle
 *   The bundle type to attach to.
 * @param $field_name
 *   The name of the field.
 * @param $headers
 *   An associative array where the keys are the header names and the values are
 *   the header indices.
 *
 * @return bool|mixed
 *   Either returns the new entity instance or FALSE if there were errors.
 */

function csv2fields_initialize_instance(&$field_data, $entity_type, $bundle, $field_name, $headers) {
  $final_field_data = array(
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'field_name' => $field_name,
  );
  foreach (array_keys($headers) as $field_property_name) {
    drupal_alter('csv2fields_field_instance_' . $field_property_name, $final_field_data, $field_data);
  }
  drupal_alter('csv2fields_field_instance', $final_field_data, $field_data);
  if (isset($final_field_data['errors']) && sizeof($final_field_data['errors'])) {
    foreach ($final_field_data['errors'] as $error) {
      drush_log(dt('@error on row @row_number', array(
        '@row_number' => $field_data['row_number'],
        '@error' => $error,
      )), 'error');
    }
    return FALSE;
  }
  else {
    return field_create_instance($final_field_data);
  }
}

/**
 * Creates a group.
 *
 * @param $group_data
 *   An associative array containing all of the data for this group.
 * @param $entity_type
 *   The entity type to attach this group to.
 * @param $bundle
 *   The bundle to attach this group to.
 * @param $group_name
 *   The group's name.
 * @param $headers
 * @return bool
 */
function csv2fields_initialize_group(&$group_data, $entity_type, $bundle, $group_name, $headers) {
  $final_group_data = array();
  foreach (array_keys($headers) as $group_property_name) {
    drupal_alter('csv2fields_group_' . $group_property_name, $final_group_data, $group_data);
  }
  drupal_alter('csv2fields_group', $final_group_data, $group_data);
  if (isset($final_group_data['errors']) && sizeof($final_group_data['errors'])) {
    foreach ($final_group_data['errors'] as $error) {
      drush_log(dt('@error on row @row_number', array(
        '@row_number' => $group_data['row_number'],
        '@error' => $error,
      )), 'error');
    }
    return FALSE;
  }
  else {
    $group = (object) array(
      'identifier' => dt('@fieldName|@type|@bundle|form', array(
        '@fieldName' => $group_data['field_group_name'],
        '@type' => $entity_type,
        '@bundle' => $bundle,
      )),
      'group_name' => $group_data['field_group_name'],
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'mode' => 'form',
      'label' => $final_group_data['label'],
      'children' => array(),
      'weight' => $final_group_data['widget']['weight'],
      'format_type' => 'fieldset',
      'format_settings' => array(
        'formatter' => 'collapsible',
        'instance_settings' => array(
          'description' => '',
          'classes' => '',
          'required_fields' => 1,
        ),
      ),
    );
    field_group_group_save($group);
    ctools_include('export');
    ctools_export_crud_enable('field_group', $group->identifier);
    return $group;
  }
}

/**
 * @param $field_instance - A field instance to add to a group. All of the data
 *    about the parent group gets added here, the field instance is added, and
 *    then the group is saved.
 */
function csv2fields_add_element_to_group($element_name, $field_group, $entity_type, $bundle) {
  $groups = field_group_read_groups(array(
    'entity_type' => $entity_type,
    'bundle'      => $bundle,
    'view_mode'   => 'full',
  ));
  $group = $groups[$entity_type][$bundle]['form'][$field_group];
  if (!empty($group)) {
    $group->children[] = $element_name;
    field_group_group_save($group);
  }
  else {
    drush_log("Couldn't find the group @group", array(
      '@group' => $field_group,
    ), 'error');
  }
}

/**
 * Implements hook_csv2fields_field_base_*_alter().
 */
function csv2fields_csv2fields_field_base_field_name_alter(&$final_field_data, &$field_data) {
  $field_name = $field_data['field_name'];
  $field_name = str_replace(' ', '_', strtolower($field_name));
  $final_field_data['field_name'] = $field_name;
}

/**
 * Implements hook_csv2fields_field_base_*_alter().
 */
function csv2fields_csv2fields_field_base_type_alter(&$final_field_data, &$field_data) {
  $final_field_data['type'] = $field_data['type'];
}

/**
 * Implements hook_csv2fields_field_base_*_alter().
 */
function csv2fields_csv2fields_field_base_cardinality_alter(&$final_field_data, &$field_data) {
  if (!isset($field_data['cardinality'])) {
    return 1;
  }
  if (intval($field_data['cardinality'])) {
    $final_field_data['cardinality'] = $field_data['cardinality'];
  }
  elseif (strtolower(substr($field_data['cardinality'], 0, 3)) == 'inf') {
    $final_field_data['cardinality'] = -1;
  }
  else {
    $final_field_data['cardinality'] = 1;
  }
}

/**
 * Implements hook_csv2fields_field_base_*_alter().
 */
function csv2fields_csv2fields_field_base_allowed_values_alter(&$final_field_data, &$field_data) {
  if ($field_data['allowed_values']) {
    $options = str_getcsv($field_data['allowed_values']);

    $options = array_map('trim', $options);
    $options = array_combine($options, $options);
    $final_field_data['settings']['allowed_values'] = $options;
    $final_field_data['settings']['allowed_values_function'] = '';

  }
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_label_alter(&$final_field_data, &$field_data) {
  $final_field_data['label'] = $field_data['label'];
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_default_value_alter(&$final_field_data, &$field_data) {
  // We can use truthy values here since 0, '', and FALSE are the defaults anyway.
  if (!empty($field_data['default_value'])) {
    $values = str_getcsv($field_data['default_value']);
    $values = array_map(function($value) {
      return array('value' => $value);
    }, $values);
    $final_field_data['default_value'] = $values;
  }
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_required_alter(&$final_field_data, &$field_data) {
  $final_field_data['required'] = $field_data['required'];
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_description_alter(&$final_field_data, &$field_data) {
  $final_field_data['description'] = $field_data['description'];
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_settings_prefix_alter(&$final_field_data, &$field_data) {
  $final_field_data['settings']['prefix'] = $field_data['settings_prefix'];
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_prefix_alter(&$final_field_data, &$field_data) {
  $field_data['settings_prefix'] = $field_data['prefix'];
  csv2fields_csv2fields_field_instance_settings_prefix_alter($final_field_data, $field_data);
}


/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_settings_suffix_alter(&$final_field_data, &$field_data) {
  $final_field_data['settings']['suffix'] = $field_data['settings_suffix'];
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_suffix_alter(&$final_field_data, &$field_data) {
  $field_data['settings_suffix'] = $field_data['suffix'];
  csv2fields_csv2fields_field_instance_settings_suffix_alter($final_field_data, $field_data);
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_settings_text_processing_alter(&$final_field_data, &$field_data) {
  if ($field_data['type'] == 'text_long') {
    $final_field_data['settings']['text_processing'] = $field_data['settings_text_processing'];
  }
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_filter_text_alter(&$final_field_data, &$field_data) {
  $field_data['settings_text_processing'] = $field_data['filter_text'];
  csv2fields_csv2fields_field_instance_settings_text_processing_alter($final_field_data, $field_data);
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_widget_type_alter(&$final_field_data, &$field_data) {
  if ($widget_type = $field_data['widget_type']) {
    $final_field_data['widget']['type'] = $widget_type;
  }
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_widget_weight_alter(&$final_field_data, &$field_data) {
  $final_field_data['widget']['weight'] = $field_data['widget_weight'];
}

/**
 * Implements hook_csv2fields_field_instance_alter().
 */
function csv2fields_csv2fields_field_instance_alter(&$final_field_data, &$field_data) {
  if (!isset($final_field_data['widget']['weight']) || $final_field_data['widget']['weight'] == '') {
    $final_field_data['widget']['weight'] = $field_data['row_number'];
  }
}

/**
 * Implements hook_csv2fields_group_*_alter().
 */
function csv2fields_csv2fields_group_label_alter(&$final_group_data, &$group_data) {
  $final_group_data['label'] = $group_data['label'];
}

/**
 * Implements hook_csv2fields_group_*_alter().
 */
function csv2fields_csv2fields_group_widget_weight_alter(&$final_group_data, &$group_data) {
  $final_group_data['widget']['weight'] = $group_data['widget_weight'];
}

/**
 * Implements hook_csv2fields_group_alter().
 */
function csv2fields_csv2fields_group_alter(&$final_group_data, &$group_data) {
  if (!isset($final_group_data['widget']['weight']) || $final_group_data['widget']['weight'] == '') {
    $final_group_data['widget']['weight'] = $group_data['row_number'];
  }
}

/**
 * Converts a csv row array into an associative array based on the column headers.
 * 
 * @param $field_data
 *   The csv row array that contains the data.
 * @param $headers
 *   An associative array where the column name is the key, and the column number
 *   is the value.
 * @return array
 *   An associative array where each column is the key and the data for the row
 *   is the value.
 */
function _csv2fields_get_data($field_data, $headers) {
  $final_field_data = array();
  foreach ($headers as $property_name => $index) {
    $final_field_data[$property_name] = trim($field_data[$index]);
  }
  return $final_field_data;
}
