<?php

function csv2fields_form_node_form_alter(&$form, &$form_state) {
  dsm($form);
  dsm(field_info_field('field_3'));
  dsm(field_info_instance('node', 'field_3', 'page'));
}


function _csv2fields_initialize_mapping($header_row) {
  $header_row = array_flip($header_row);
  $cols_for_mapping = module_invoke_all('csv2fields_declare_mapping_column');
  foreach ($cols_for_mapping as $col_name) {
    if (!isset($header_row[$col_name])) {
      $header_row[$col_name] = -1;
    }
  }
  return $header_row;
}

/**
 * Gets lines from the csv.
 * @param $csv - The path to a csv to read
 * @param $subset - The subset string from cli options. Should look something
 *   like '138:187'.
 * @return array
 */
function _csv2fields_get_csv_lines(&$csv, $header_row = 1, $subset = '') {
  $fields = array();
  $row = 1;
  if (!empty($subset)) {
    $subset = explode(':', $subset);
    $start_line = $subset[0];
    $end_line = $subset[1];
  }
  if (($handle = fopen($csv, "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      if ($row == $header_row) {
        $fields['header_row'] = $data;
      }
      elseif (($row >= $start_line && $row <= $end_line) || empty($subset)) {
        $fields[] = $data;
      }
      $row++;
    }
    fclose($handle);
  }
  return $fields;
}

/**
 * Adds a field if it doesn't already exist.
 * @param $field_data - The array of data from the csv.
 * @param $all_fields - The list of all fields (gotten from field_info_field_map()).
 * @return array - The newly built field.
 * @throws \Exception
 * @throws \FieldException
 */
function _csv2fields_add_field($field_data, $all_fields, $map) {
  $field = array(
    'field_name' => $field_data[$map['machine_name']],
    'type' => $field_data[$map['type']],
    'data' => $field_data,
  );
  drupal_alter('csv2fields_field', $field, $map);
  if (!_csv2fields_check_field_exists($all_fields, $field['field_name']) && $field['type'] != 'fieldset') {
    $field = field_create_field($field);
  }
  return $field;
}

/**
 * Adds a field instance or field group to the entity if it isn't already there.
 * @param $field - The field (without an instance).
 * @param $field_data - The array of data from the csv.
 * @param $all_fields - The list of all fields (gotten from field_info_field_map()).
 * @param $entity_type - The entity type.
 * @param $bundle - The bundle name.
 * @param $row_number - The row number from the csv, used for applying a weight
 *   to each field instance.
 * @throws \FieldException
 */
function _csv2fields_add_to_entity($field, $field_data, $all_fields, $map, $entity_type, $bundle, $row_number) {
  $field_instance = array(
    'field_name' => $field['field_name'],
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'type' => $field_data[$map['type']],
    'description' => $field_data[$map['description']],
    'label' => $field_data[$map['label']],
    'required' => $field_data[$map['required']],
    'widget' => array('weight' => $row_number,),
    'display' => array(),
    'field_group' => strtolower($field_data[$map['field_group']]),
    'data' => $field_data,
  );

  drupal_alter('csv2fields_instance', $field_instance, $map);

  // @TODO - fieldgroups are not technically field instances. Either break this
  //    out, or rename the $field_instance variable.
  if ($field_instance['type'] == 'fieldset') {
    _csv2fields_add_group($field_instance);
  }
  elseif (!_csv2fields_check_instance_exists($all_fields, $field_instance['field_name'], $entity_type, $bundle)) {
    unset($field_instance['data']);
    $field_instance = field_create_instance($field_instance);
    if ($field_instance['type'] == 'list_integer' || $field_instance['type'] == 'list_text') {
      // @TODO: Add in options-button
    }
  }
  if (!empty($field_instance['field_group'])) {
    _csv2fields_add_field_to_group($field_instance);
  }
}

/**
 * @param $all_fields - The list of all fields (gotten from field_info_field_map()).
 * @param $field_name - The name of the field.
 * @return bool - Returns whether the field exists in $all_fields.
 */
function _csv2fields_check_field_exists($all_fields, $field_name) {
  return !empty($all_fields[$field_name]);
}

/**
 * @param $all_fields - The list of all fields (gotten from field_info_field_map()).
 * @param $field_name - The machine name of the field.
 * @param $entity_type - The name of the entity type.
 * @param $bundle - The name of the bundle.
 * @return bool - Whether the field already exists on the given bundle.
 */
function _csv2fields_check_instance_exists($all_fields, $field_name, $entity_type, $bundle) {
  $exists = (_csv2fields_check_field_exists($all_fields, $field['field_name']) &&
    !empty($all_fields[$field_name]['bundles'][$entity_type]) &&
    in_array($bundle, $all_fields[$field_name]['bundles'][$entity_type]));
  return $exists;
}



/**
 * @param $group_instance - The group to create. All info about the entity
 *    and bundle should be in this variable.
 */
function _csv2fields_add_group($group_instance) {
  $group = (object) array(
    'identifier' => dt('@fieldName|@type|@bundle|form', array(
      '@fieldName' => $group_instance['field_name'],
      '@type' => $group_instance['entity_type'],
      '@bundle' => $group_instance['bundle'],
    )),
    'group_name' => dt('@fieldName', array(
      '@fieldName' => $group_instance['field_name'],
    )),
    'entity_type' => $group_instance['entity_type'],
    'bundle' => $group_instance['bundle'],
    'mode' => 'form',
    'label' => $group_instance['label'],
    'children' => array(),
    'weight' => $group_instance['widget']['weight'],
    'format_type' => 'fieldset',
    'format_settings' => array(
      'formatter' => 'collapsible',
      'instance_settings' => array(
        'description' => '',
        'classes' => '',
        'required_fields' => 1,
      ),
    ),
  );
  field_group_group_save($group);
  ctools_include('export');
  ctools_export_crud_enable('field_group', $group->identifier);
}

/**
 * @param $field_instance - A field instance to add to a group. All of the data
 *    about the parent group gets added here, the field instance is added, and
 *    then the group is saved.
 */
function csv2fields_add_field_to_group($field_name, $field_group, $entity_type, $bundle) {
  $groups = field_group_read_groups(array(
    'entity_type' => $entity_type,
    'bundle'      => $bundle,
    'view_mode'   => 'full',
  ));
  $group = $groups[$entity_type][$bundle]['form'][$field_group];
  if (!empty($group)) {
    $group->children[] = $field_name;
    field_group_group_save($group);
  }
}

function csv2fields_get_data($field_data, $headers) {
  $final_field_data = array();
  foreach ($headers as $property_name => $index) {
    $final_field_data[$property_name] = $field_data[$index];
  }
  return $final_field_data;
}

function csv2fields_initialize_field($field_data, $entity_type, $headers) {
  $final_field_data = array();
  foreach (array_keys($headers) as $field_property_name) {
    drupal_alter('csv2fields_field_base_' . $field_property_name, $final_field_data, $field_data);
  }
  drupal_alter('csv2fields_field_base', $final_field_data, $field_data);

  if (!isset($headers['field_name']) || !$final_field_data['field_name']) {
    $final_field_data['errors'][] = dt('Missing field_name');
  }

  if (!isset($headers['type']) || !$final_field_data['type']) {
    $final_field_data['errors'][] = dt('Missing type');
  }

  if (isset($final_field_data['errors']) && sizeof($final_field_data['errors'])) {
    foreach ($final_field_data['errors'] as $error) {
      drush_log(dt('@error on row @row_number', array(
        '@row_number' => $field_data['row_number'],
        '@error' => $error,
      )), 'error');
    }
    return FALSE;
  }
  else {
    $field = field_info_field($final_field_data['field_name']);
    if ($field) {
      return $field;
    }
    return field_create_field($final_field_data);
  }
}

function csv2fields_initialize_instance($field_data, $entity_type, $bundle, $field_name, $headers) {
  $final_field_data = array(
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'field_name' => $field_name,
  );
  foreach (array_keys($headers) as $field_property_name) {
    drupal_alter('csv2fields_field_instance_' . $field_property_name, $final_field_data, $field_data);
  }
  drupal_alter('csv2fields_field_instance', $final_field_data, $field_data);
  if (isset($final_field_data['errors']) && sizeof($final_field_data['errors'])) {
    foreach ($final_field_data['errors'] as $error) {
      drush_log(dt('@error on row @row_number', array(
        '@row_number' => $field_data['row_number'],
        '@error' => $error,
      )), 'error');
    }
    return FALSE;
  }
  else {
    return field_create_instance($final_field_data);
  }
}

function csv2fields_initialize_group($group_data, $entity_type, $bundle, $group_name, $headers) {
  $final_group_data = array(
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'field_name' => $group_name,
  );
  foreach (array_keys($headers) as $group_property_name) {
    drupal_alter('csv2fields_group_' . $group_property_name, $final_group_data, $group_data);
  }
  drupal_alter('csv2fields_group', $final_group_data, $group_data);
  if (isset($final_group_data['errors']) && sizeof($final_group_data['errors'])) {
    foreach ($final_group_data['errors'] as $error) {
      drush_log(dt('@error on row @row_number', array(
        '@row_number' => $group_data['row_number'],
        '@error' => $error,
      )), 'error');
    }
    return FALSE;
  }
  else {
    $group = (object) array(
      'identifier' => dt('@fieldName|@type|@bundle|form', array(
        '@fieldName' => $group_name,
        '@type' => $entity_type,
        '@bundle' => $bundle,
      )),
      'group_name' => $group_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'mode' => 'form',
      'label' => $final_group_data['label'],
      'children' => array(),
      'weight' => $final_group_data['widget']['weight'],
      'format_type' => 'fieldset',
      'format_settings' => array(
        'formatter' => 'collapsible',
        'instance_settings' => array(
          'description' => '',
          'classes' => '',
          'required_fields' => 1,
        ),
      ),
    );
    field_group_group_save($group);
    ctools_include('export');
    ctools_export_crud_enable('field_group', $group->identifier);
  }
}

/**
 * Implements hook_csv2fields_field_base_*_alter().
 */
function csv2fields_csv2fields_field_base_field_name_alter(&$final_field_data, &$field_data) {
  $field_name = $field_data['field_name'];
  $field_name = str_replace(' ', '_', strtolower($field_name));
  $final_field_data['field_name'] = $field_name;
}

/**
 * Implements hook_csv2fields_field_base_*_alter().
 */
function csv2fields_csv2fields_field_base_type_alter(&$final_field_data, &$field_data) {
  $final_field_data['type'] = $field_data['type'];
}

/**
 * Implements hook_csv2fields_field_base_*_alter().
 */
function csv2fields_csv2fields_field_base_cardinality_alter(&$final_field_data, &$field_data) {
  if (!isset($field_data['cardinality'])) {
    return 1;
  }
  if (intval($field_data['cardinality'])) {
    $final_field_data['cardinality'] = $field_data['cardinality'];
  }
  elseif (strtolower(substr($field_data['cardinality'], 0, 3)) == 'inf'){
    $final_field_data['cardinality'] = -1;
  }
  else {
    $final_field_data['cardinality'] = 1;
  }
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_label_alter(&$final_field_data, &$field_data) {
  $final_field_data['label'] = $field_data['label'];
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_default_value_alter(&$final_field_data, &$field_data) {
  // We can use truthy values here since 0, '', and FALSE are the defaults anyway.
  if (!empty($field_data['default_value'])) {
    $final_field_data['default_value'][0]['value'] = $field_data['default_value'];
  }
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_description_alter(&$final_field_data, &$field_data) {
  $final_field_data['description'] = $field_data['description'];
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_settings_prefix_alter(&$final_field_data, &$field_data) {
  $final_field_data['settings']['prefix'] = $field_data['settings_prefix'];
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_settings_suffix_alter(&$final_field_data, &$field_data) {
  $final_field_data['settings']['suffix'] = $field_data['settings_suffix'];
}

/**
 * Implements hook_csv2fields_field_instance_*_alter().
 */
function csv2fields_csv2fields_field_instance_widget_weight_alter(&$final_field_data, &$field_data) {
  $final_field_data['widget']['weight'] = $field_data['widget_weight'];
}

/**
 * Implements hook_csv2fields_field_instance_alter().
 */
function csv2fields_csv2fields_field_instance_alter(&$final_field_data, &$field_data) {
  if (!isset($final_field_data['widget']['weight']) || $final_field_data['widget']['weight'] == '') {
    $final_field_data['widget']['weight'] = $field_data['row_number'];
  }
}

/**
 * Implements hook_csv2fields_group_*_alter().
 */
function csv2fields_csv2fields_group_label_alter(&$final_group_data, &$group_data) {
  $final_group_data['label'] = $group_data['label'];
}

/**
 * Implements hook_csv2fields_group_*_alter().
 */
function csv2fields_csv2fields_group_widget_weight_alter(&$final_group_data, &$group_data) {
  $final_group_data['widget']['weight'] = $group_data['widget_weight'];
}

/**
 * Implements hook_csv2fields_group_alter().
 */
function csv2fields_csv2fields_group_alter(&$final_group_data, &$group_data) {
  if (!isset($final_group_data['widget']['weight']) || $final_group_data['widget']['weight'] == '') {
    $final_group_data['widget']['weight'] = $group_data['row_number'];
  }
  print_r($final_group_data);
}